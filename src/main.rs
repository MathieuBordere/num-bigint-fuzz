use base64::decode;
use num_bigint::BigUint;
use signal_hook::flag;
use std::fs::File;
use std::io::{BufRead, BufReader, Read, Result, Write};
use std::process::{Command, Stdio};
use std::sync::{
    atomic::{AtomicBool, Ordering},
    Arc,
};

fn main() -> Result<()> {
    let mut rng = File::open("/dev/urandom")?;
    let mut counter: u64 = 0;

    let mut bigintpy = Command::new("python3")
        .arg("bigint.py")
        .stdout(Stdio::piped()) // Capture stdout
        .stdin(Stdio::piped()) // Capture stdin
        .spawn()
        .expect("Failed to start process");

    let mut stdin = bigintpy.stdin.take().unwrap();
    let stdout = bigintpy.stdout.take().unwrap();
    let mut stdoutlines = BufReader::new(stdout).lines();

    let term = Arc::new(AtomicBool::new(false));

    // Loop that runs until SIGINT is received
    flag::register(signal_hook::consts::SIGINT, Arc::clone(&term))
        .expect("Failed to register signal handler");
    while !term.load(Ordering::Relaxed) {
        /* Randomly decide how many bytes to generate */
        let mut buffer = [0u8; 2];
        rng.read_exact(&mut buffer)?;

        let mut n_bytes = u16::from_be_bytes(buffer);
        if n_bytes < 2 {
            n_bytes = 2;
        }

        // Holds the random bytes for the BigUints
        let mut buffer2: Vec<u8> = vec![];
        buffer2.resize(n_bytes as usize, 0);
        rng.read_exact(&mut buffer2)?;
        buffer2[0] = 0;

        // Random number to decide where to split
        let mut buffer4 = [0u8; 4];
        rng.read_exact(&mut buffer4)?;
        let r = u32::from_be_bytes(buffer4);
        let mut split_i = (r % (n_bytes as u32)) as usize;
        if split_i == 0 as usize {
            split_i = 1;
        }
        let split = buffer2.split_at(split_i);

        let a = BigUint::from_bytes_be(split.0);
        let b = BigUint::from_bytes_be(split.1);

        let mut op: &str = "add";
        if r % 2 == 1 {
            op = "mult";
        }
        writeln!(stdin, "{}", op).unwrap();
        writeln!(stdin, "{}", base64::encode(&a.to_bytes_be())).unwrap();
        writeln!(stdin, "{}", base64::encode(&b.to_bytes_be())).unwrap();

        let res: BigUint;
        match op {
            "add" => {
                res = &a + &b;
            }
            "mult" => {
                res = &a * &b;
            }
            _ => panic!("Mathematics broke."),
        }

        if let Some(line) = stdoutlines.next() {
            match line {
                Ok(text) => {
                    let decoded = decode(text).unwrap();
                    let res_encoded = res.to_bytes_be();
                    if decoded != res_encoded {
                        return Err(std::io::Error::new(
                            std::io::ErrorKind::Other,
                            format!(
                                "Error for op {} left operand {} right operand {} decoded {:?} res_encoded {:?}",
                                op, &a, &b, &decoded, &res_encoded
                            ),
                        ));
                    }
                }
                Err(e) => eprintln!("Error reading line: {}", e),
            }
        }
        counter += 1;
        if counter % 1000 == 0 {
            println!("Iteration {}", counter);
        }
    }

    Ok(())
}

/// Write a test that takes 2 BigUint literals in a string decimal interpration and multiplies them and compares them with an expected
/// result.

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use super::*;

    #[test]
    fn it_works() {
        let expected = BigUint::ZERO;
        let l = BigUint::from_bytes_be(&[0u8]);
        let r = BigUint::from_str("2775283620974352110830747197856086576224644402189184696753515357185887941779383002035951797743550401665672433285378354960585532866936179115102320978184703553726972555226092253867882695143148044200591027674750023729916844547694039874731492441318380013301495109119513188776406770407413352457595066100206773466596686572529592569842467126446850918308710276230588322701411287183304074829133879898768330049975818645850720525979260694678353394557652923603620819713752592234040938600178065238837830775011637331648864353661662196622733964859765532820068843786481950446202119494304441577675997301438747947254848044504139810993589245781542865051335217114724922870839104894489319386868308592447465051590255787446522826977097252571117163232164261431045552539903678579611568782063778082858330523623639723195159861797523322607347018330464592926996866129215242396335405213732508440264558656157711795221115435501589194068319080157554446418491059117543741900208535448910779952678872067396065357244546610942070489041020981539909225937530895093572194385977277327439941577501379408248676809483208199510441272995713726781778036676165959144315205669491694182022773459722035775721073911401924931981944630924201233139998387366346275900693607068083812791592966739646137339227034550662687658254896775492886972327226865130841260620596244728243100472107352980627779364799550353535121634185933335270489864761788010546899583838654425884217134248190750479988066520447741038078160183151286041313929604766806565393769432674023973105624726966743060432408178262535399676164706033533096481926742442996961392764894336092495454631620174630179508367019753123568229588787179445785033864713556611876079524202533863604422568345654673321607656960647995890842560751496682031216065229160319433156754778056003847220600344680046261915679768384825564045002254143232889928626969406740841267211445071670763305898986969579799231922920786783352479255943356474720270703817193103660844200912774739665992674792576563344735404195471558659222690938290402845852500016293111371189748981827822329439260192383539562906092976077744366255415653450927133800215952961005986424509665562137130085265280558150726143601460684722375883557929126937961626226478090494244359929916738983583251009143429001694409276634376703661603985168207545050610215733490746433928759432444547276417363290200455968898090102555936666252695610349828632913147258638302005076420765677189705163889390794607844071314254427067710314416093708250895146810424717799083375425486270442809603966570605366664023325868232854043851734668956720425400294697571100008898078922212844065662161046712503566607513045163630863402011758836032668079275137865602327704674602058077079036205602203712719305487385590508849857901475327492422937625781900376600190771155932763455162180809342369820113829052265426299480450265613387047926897732574357752766501515832679461847492352669595789230327280558957961638082909121770744321919787680166508484819463166099557931336140905362147184685625381410535723474792645717762138254649313032472989894287464422268598523346345102444704976561245017636745686324024452891163959548157027708308765132133454695804039130960779661271795438782383867506715300104997994171096250220843765924483705040940491523825429205499058886090597512509356539584100833576600575250921696779931615498102745742524376345123244587662462880010498900482784587890352482863246035168833791085991842170184576573387117477485957640072492423674522065541175892372396876360628900811956839698424589086018618968260982601209170996405511234562832119102256026959025584938742231543051102789276864377887120461420869463473283920876795820908905259218718904292303424023413779947483268891276498987420814519490638970976351888947406004757584678485376537369582441218788602618632883923625603291645258286525211469212056183734873046780073616505834088685724907871260549872659884136141892847483840804875988862779563437356312085209621617340125167433065729565802872669708208951069184475372042713944850430448068465084747401620116660229560494551851230538719719362911320228062511602948144860836366473059618204309313616919626775890214127583281366794037560693317287392567759603038114919794123156879930248931969452083869897306945170471559962707849315900556817659687701996761110471326734156150403240985807442436117346775832128666091054439872800355610574573350310935891844087383480662400870310959368018927421343078634829530603190159573253861357907473846732418219328594868575003342383205354569278419616443972830391007208209198698187765663606504475823307330121583686038047674987710221571610306841366813292627773184796067688316031031121338463845520853050011885207533701922715155677686288162289591404590918891414914709425748570200897620065455327161662958082529672524481331363960370890010464277369838721360951253351908428683437441209800455993280729997177548845666248924853135782506919288091715615617740611165525778615248529109523156877862575778217768958752624850368620913959823373610523397201250754987881141791566644942787235730596266946626055593464272141199739497800907311612787260641976650620616366081530871539616733452563662067809964481762545856325982117876985396473702574983074451914116602919226951642853936654868746112946633808552189357667089073167022041882804364589475930118689579966682673447145817905846497480499774117853342977491609232509389528254388104875720596989426553454260454945503866480087242020973991005263785045087393811684671634563750572339638611476073716050623222238035230863047649740816598362698496412491688897221267094867572978473979355954215470996822786357160655824447992952628384772422766830098133462335541128788903790507281144275712913161532496153678108605938147143704911874823726051437568092597387893918903915904402238156396318870759430751496705408422476698316126983746689677615590715164983093078475818713979015596930707059291336459748569351218204067522454513598072482627601476341820331534594940844339982850287177761924095850415247429726961902107586620392419509715832579031366330712087038068428444703773187287680437413297743183654415803174014156636094972750938941830804888907527910921368968625254597737024175765050951224364945898696685569867957707382283784239571184745653654063023421911396692963809381939134757733642660252455115517796827091506936736309978459274640610540919458800854611558608654769462478700685638671145506105870582982075636534183922988540112198319055698494642270560321543681238976743662631459760374801138075734891705011502193664097647141761272088595430683231116038679358038756117248930990524595928691535422719335684456878966623362995203168565152835289223663307120563312374674965964544908435974181242426679287649604048960439963302886696872398583966066501396682108786").unwrap();
        assert_eq!(&l * &r, expected);
    }
}
